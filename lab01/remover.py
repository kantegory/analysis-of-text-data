#!/usr/bin/python3
# -*- coding: utf-8 -*-

# импортируем все зависимости
import re


class PersonalDataRemover:
  """
  Класс для удаления персональных данных в соответствии с регулярным выражением

  ...

  Атрибуты
  ----------
  patterns : list
    список паттернов, по которым нужно удалить
    персональные данные
  replace_with : str
    символ, которым будет заменяться ФИО
  data : list
    массив строк, в которых нужно заменить ФИО

  Методы
  -------
  find_and_replace():
    Находит и заменяет все персональные данные на символ
    self.replace_with
  """

  def __init__(self, replace_with=None, data=None):
    """
    Конструктор для PersonalDataRemover

    Параметры
    ----------
    :param replace_with : str
      символ, которым будут заменяться персональные данные
    :param data : list
      массив строк, в которых нужно заменить персональные данные
    """

    # паттерны, регулярные выражения
    self.patterns = [
      {
        "title": "ФИО",
        "patterns": [re.compile("([А-Я]{1}[а-я]+)(\s)*([А-Я]{1}(\.|[а-я]+))(\s)*([А-Я]{1}(\.|[а-я]+))")]
      },
      {
        "title": "Email",
        "patterns": [re.compile("([a-z0-9_\.-]+)@([a-z0-9_\.-]+)\.([a-z\.]{2,6})")]
      },
      {
        "title": "Номер телефона",
        "patterns": [re.compile("((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}")]
      },
      {
        "title": "URL-адрес",
        "patterns": [re.compile("(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})")]
      },
      {
        "title": "Число (номер карты и т. п.)",
        "patterns": [re.compile("№((\s)|(:))?((\s){0,8}(м/к)?(:)?(\s){0,4})[А-Яа-яA-Za-z0-9\/]{0,11}")]
      },
      {
        "title": "Дата",
        "patterns": [
          re.compile("\s*(3[01]|[12][0-9]|0?[1-9])(\.|\/|\s|\-|\:)((1[012]|0?[1-9])|((я|Я)нв(ар(ь|я))?|(ф|Ф)ев(рал(ь|я))?|(м|М)ар(т|та)?|(а|А)пр(ел(ь|я))?|(м|М)а(й|я)|(и|И)юн(ь|я)?|(и|И)юл(ь|я)?|(а|А)вг(ус(т|та))?|(с|С)ен(тябр(ь|я))?|(о|О)кт(ябр(ь|я))?|(н|Н)ояб(р(ь|я))?|(д|Д)ек(абр(ь|я))?))(\.|\/|\s|\-|\:)((?:19|20)\d{2})\s*"),
          re.compile("([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})"),
          re.compile("([0-1]?[0-9]|[2][0-3]\:)?([0-5][0-9])\:([0-5][0-9])")
        ]
      },
      {
        "title": "ИНН",
        "patterns": [re.compile("(?<=(ИНН))((\s)?\:(\s)?|(\s)?\-(\s)?|(\s))(\d{12})")]
      },
      {
        "title": "СНИЛС",
        "patterns": [re.compile("(?<=(СНИЛС))((\s)?\:(\s)?|(\s)?\-(\s)?|(\s)|(\s|\:|\-){0,2}?\№(\s|\:|\-){0,2}?)(\d{3}\-\d{3}\-\d{3}\-\d{2})")]
      },
      {
        "title": "Паспорт",
        "patterns": [re.compile("(((П|п)аспорт(а)?))((\s)?\:(\s)?|(\s)?\-(\s)?|(\s)|(\s|\:|\-){0,2}?\№(\s|\:|\-){0,2}?)(\d{2}(\s)?\d{2}(\s)?\d{6})")]
      }
    ]
    
    # символ для замены персональных данных
    self.replace_with = "*" if not replace_with else replace_with

    # данные, по которым будет проходить алгоритм
    self.data = data

  def find_and_replace(self):
    """
    Функция для поиска и замены всех персональных 
    данных на self.replace_with.
    """

    # заводим две пустых переменных
    # для удалённых вхождений и для
    # итогового результата, соответственно
    removed_names = []
    result = []

    # проходимся по кажджому из имеющихся паттернов
    for pattern in self.patterns:
      # проходимся по каждому регулярному выражению
      # внутри паттерна
      for regex in pattern["patterns"]:
          # пока совпадения есть, мы должны их заменять
          while re.search(regex, self.data):
            # вытаскиваем совпадение
            match = re.search(regex, self.data)[0]
            # заменяем
            self.data = re.sub(regex, self.replace_with, self.data, 1)
            # добавляем совпадение в удалённые вхождения
            removed_names.append(match)

    # записываем результат
    result.append(self.data)

    # возвращаем результат и удалённые вхождения
    return result, removed_names
